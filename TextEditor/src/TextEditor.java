import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
 
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import static javax.swing.text.StyleConstants.FontSize;
import javax.swing.text.StyledDocument;
import java.util.regex.*;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import static sun.font.GlyphLayout.done;
/**
 *
 * @author bhavin
 */
public class TextEditor extends javax.swing.JFrame {

    /**
     * Creates new form TextEditor
     */
    DefaultListModel dlmlist;
    public TextEditor() {
        initComponents();
        
          dlmlist = new DefaultListModel();
    }
File fileToSave = null;   
/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton7 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton8 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bhavin's Text Editor");
        setMinimumSize(new java.awt.Dimension(500, 550));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Document Title");

        jButton2.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jButton2.setText("B");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Noto Sans", 2, 14)); // NOI18N
        jButton3.setText("I");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jButton4.setText("U");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Date Modified : ");

        jTextField2.setEditable(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Author :");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextPane1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextPane1CaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPane1);

        jToggleButton2.setText("Read Mode");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jButton5.setText("Highlight");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Import File");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Shift+S For", "Iridium Cloud", "File List" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList2);

        jButton7.setText("Open");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Keep On Top");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton8.setText("Upload");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "54", "72", "82", "90", "98" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(100, 86, 86));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jToggleButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jToggleButton2))
                .addGap(6, 6, 6)
                .addComponent(jButton8)
                .addGap(6, 6, 6)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New Document");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Open");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save ");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Color");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Change Text Color ");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem5.setText("Change Highlight Color");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Alignment");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Justified");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Upload Functions");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem9.setText("Show Files");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuBar1.add(jMenu5);

        jMenu2.setText("About");

        jMenuItem7.setText("Developer");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem8.setText("Help");
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(12, 12, 12)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void SavingActivities()
    {
        FileSaved = 1;
        jButton1.setBackground(Color.WHITE);
        jButton1.setText("Saved");
        String TitleText = jTextField1.getText();
        String Author = jTextField3.getText();
        String str = jTextPane1.getText();
        FileOutputStream Fileout = null;
        if(fileToSave == null)
        {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Specify a file to save");
        try {
            Fileout = new FileOutputStream("output.txt");
        int SaveFlag = chooser.showSaveDialog(this);
        if (SaveFlag == JFileChooser.APPROVE_OPTION) {
           fileToSave = chooser.getSelectedFile();
           PrintWriter out = new PrintWriter(fileToSave);
           out.println("Document Title :  " + TitleText);
           out.println("Document Author : " + Author);
           out.println(str);
           out.close();
           jLabel2.setText(fileToSave.getName());
          } 
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else if(fileToSave !=null)
        {
           PrintWriter out = null;
            try {
                out = new PrintWriter(fileToSave);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
           out.println("Document Title :  " + TitleText);
           out.println("Document Author : " +  Author);
           out.println(str);
           out.close();
           jLabel2.setText(fileToSave.getName());
        }
    }
    
    public void NewDocumentActivities()
    {
         jTextField1.setText(" ");
        jTextPane1.setText(" ");
        fileToSave = null;
        jLabel2.setText(" ");
        jTextField2.setText("");
        jTextField3.setText("");
       this.setTitle("Bhavin's Text Editor");
    }
    String fileToSaveName;
    File CLSFile;
    public void HighLightCLS(int from,int to,Color highlightcolor) throws IOException
    {
        String absolutePath = fileToSave.getAbsolutePath();
        String filePath = absolutePath.substring(0,absolutePath.lastIndexOf(File.separator));
          fileToSaveName = (fileToSave.getName()).replaceFirst("[.][^.]+$", "");
         CLSFile =new File(fileToSaveName + ".CLS");
        System.out.println(CLSFile.getAbsolutePath());
        FileOutputStream CLSoutFile= new FileOutputStream(CLSFile, true); 
        PrintWriter highout = new PrintWriter(CLSoutFile);
        int red = highlightcolor.getRed();
        int blue = highlightcolor.getBlue();
        int green = highlightcolor.getGreen();
        highout.println("::HighLight::"+"<"+from+">"+red+"|"+blue+"|"+green+"<"+to+">");
         highout.close();
    }
    
    public void BoldCLS(int from,int to) throws IOException
    {
        String absolutePath = fileToSave.getAbsolutePath();
        String filePath = absolutePath.substring(0,absolutePath.lastIndexOf(File.separator));
          fileToSaveName = (fileToSave.getName()).replaceFirst("[.][^.]+$", "");
         CLSFile =new File(fileToSaveName + ".CLS");
        System.out.println(CLSFile.getAbsolutePath());
        FileOutputStream CLSoutFile= new FileOutputStream(CLSFile, true); 
        PrintWriter boldout = new PrintWriter(CLSoutFile);
        boldout.println("::Bold::");
        //int red = highlightcolor.getRed();
        //int blue = highlightcolor.getBlue();
        //int green = highlightcolor.getGreen();
        boldout.println("<"+from+">"+"<"+to+">");
         boldout.close();
    }
    String Str;
    Boolean CheckCase;
    String pattern ="::HighLight::<(\\d+)>(\\d+)\\|(\\d+)\\|(\\d+)<(\\d+)>";
    Matcher m;
    int from,to,red,green,blue;
    
    public void OpenCLSFile() throws IOException
    {
        StyledDocument doc = jTextPane1.getStyledDocument();
        fileToSaveName = (fileToSave.getName()).replaceFirst("[.][^.]+$", "");
        BufferedReader CLSApplyFile = new BufferedReader(new FileReader(new File(fileToSaveName + ".CLS")));
        if(CLSApplyFile == null)
            CLSFile.createNewFile();
       Pattern r = Pattern.compile(pattern);
        while((Str = CLSApplyFile.readLine())!=null)
        {
            //CheckCase = Str.startsWith("::HighLight::");
            //if(CheckCase==true)
            //{
               m = r.matcher(Str);
            //}
      m.find();
        from = Integer.parseInt(m.group(1));
        to = Integer.parseInt(m.group(5));
        red = Integer.parseInt(m.group(2));
        blue = Integer.parseInt(m.group(3));
        green = Integer.parseInt(m.group(4));
         Style style = jTextPane1.addStyle("I'm a Style", null);
         highcolor = new Color(red,green,blue);
         StyleConstants.setBackground(style, highcolor);
    doc.setCharacterAttributes(from, to-from, style, true);
        }
  CLSApplyFile.close();
    }
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(jButton1.getText() == "Saved")
        { NewDocumentActivities();
        }
        else
        {
            JOptionPane NewLastSave=new JOptionPane();
            int SaveOutput =  NewLastSave.showConfirmDialog(this, "Do You Want To Save Changes to your Document" + "\nDocument Title : "  + jTextField1.getText());
            if(SaveOutput == JOptionPane.YES_OPTION)
                    {
                      SavingActivities();
                      NewDocumentActivities();
                    }
            else if(SaveOutput == JOptionPane.NO_OPTION)
            {
                NewDocumentActivities();
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        FileSaved=1;
        jButton1.setBackground(Color.WHITE);
        jButton1.setText("Saved");
        String TitleText = jTextField1.getText();
        String Author = jTextField3.getText();
        String str = jTextPane1.getText();
        FileOutputStream Fileout = null;
        if(fileToSave == null)
        {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Specify a file to save");
        try {
            Fileout = new FileOutputStream("output.txt");
        int SaveFlag = chooser.showSaveDialog(this);
        if (SaveFlag == JFileChooser.APPROVE_OPTION) {
           fileToSave = chooser.getSelectedFile();
           PrintWriter out = new PrintWriter(fileToSave);
           out.println("Document Title :  " + TitleText);
           out.println("Document Author : " + Author);
           out.println("\n");
           out.println(str);
           out.close();
           jLabel2.setText(fileToSave.getName());
          } 
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else if(fileToSave !=null)
        {
           PrintWriter out = null;
            try {
                out = new PrintWriter(fileToSave);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
           out.println("Document Title :  " + TitleText);
           out.println("Document Author : " +  Author);
           out.println(str);
           out.close();
           jLabel2.setText(fileToSave.getName());
        }
        fileToSaveName = (fileToSave.getName()).replaceFirst("[.][^.]+$", "");
        this.setTitle("Bhavin's Text Editor : " + fileToSave.getName());
         CLSFile =new File(fileToSaveName + ".CLS");
        try {
            CLSFile.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
Integer sizeint,sizecomp;
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
     if (jTextPane1.getSelectedText() != null) { 
         JColorChooser chooser = new JColorChooser();
         Color color = chooser.showDialog(this,"Select Text Color",Color.red);        
        StyledDocument doc = jTextPane1.getStyledDocument();
        
    int from = jTextPane1.getSelectionStart();
    int to = jTextPane1.getSelectionEnd();
    Style style = jTextPane1.addStyle("I'm a Style", null);
    StyleConstants.setForeground(style, color);
    StyleConstants.setFontSize(style,sizeint);
    doc.setCharacterAttributes(from, to-from, style, true);
     } 
    else
         JOptionPane.showMessageDialog(this, "No Text Selected. Please selected some text to color");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String size =  (String) jComboBox1.getSelectedItem();
         sizecomp = sizeint;
        sizeint =new  Integer(size);  
        /*Font font = new Font("Arial",20,sizeint);
        String s = jTextPane1.getSelectedText();
        StyledDocument doc = jTextPane1.getStyledDocument();
    int from = jTextPane1.getSelectionStart();
    int to = jTextPane1.getSelectionEnd();
    Style stylesize = jTextPane1.addStyle("fontsize", null);
    StyleConstants.setFontSize(stylesize,sizeint);
    doc.setCharacterAttributes(from, to-from, stylesize, true);*/
        //Color color = JColorChooser.showDialog(this, "Colors",Color.BLUE);
        Font font = new Font("Arial",20 ,sizeint);
        jTextPane1.setFont(font);
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        StyledDocument doc = jTextPane1.getStyledDocument();
    int from = jTextPane1.getSelectionStart();
    int to = jTextPane1.getSelectionEnd();
    if(1==FileSaved)
    {
    try {
            BoldCLS(from,to);
        } catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    Style stylesize = jTextPane1.addStyle("Bold", null);
    StyleConstants.setBold(stylesize, rootPaneCheckingEnabled);
    doc.setCharacterAttributes(from, to-from, stylesize, true); 
    }//GEN-LAST:event_jButton2ActionPerformed
int FileSaved = 0;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
if (jTextPane1.getSelectedText() != null) {      
    StyledDocument doc = jTextPane1.getStyledDocument();
    int from = jTextPane1.getSelectionStart();
    int to = jTextPane1.getSelectionEnd();
    if(FileSaved == 1){
    try {
        HighLightCLS(from,to,highcolor); //CLS Composite Layout Sheet -- Our Own Defined style sheet
    } catch (IOException ex) {
        Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    Style style = jTextPane1.addStyle("I'm a Style", null);
    //if (highcolor != null)
    StyleConstants.setBackground(style, highcolor);
    //else 
    //StyleConstants.setBackground(style, Color.yellow);    
    doc.setCharacterAttributes(from, to-from, style, true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    }
Color highcolor = Color.yellow;
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
    JColorChooser chooser = new JColorChooser();
    highcolor = chooser.showDialog(this,"Select Highlight Color",Color.red);        

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
StyledDocument doc = jTextPane1.getStyledDocument();
    int from = jTextPane1.getSelectionStart();
    int to = jTextPane1.getSelectionEnd();
    Style stylesize = jTextPane1.addStyle("Italics", null);
    StyleConstants.setItalic(stylesize, rootPaneCheckingEnabled);
    doc.setCharacterAttributes(from, to-from, stylesize, true);        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        StyledDocument doc = jTextPane1.getStyledDocument();
    int from = jTextPane1.getSelectionStart();
    int to = jTextPane1.getSelectionEnd();
    Style stylesize = jTextPane1.addStyle("Bold", null);
    StyleConstants.setUnderline(stylesize, rootPaneCheckingEnabled);
    doc.setCharacterAttributes(from, to-from, stylesize, true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        /*StyledDocument doc = jTextPane1.getStyledDocument();
    jTextPane1.selectAll();
    int from = jTextPane1.getSelectionStart();
    int to = jTextPane1.getSelectionEnd();
    Style stylesize = jTextPane1.addStyle("Alignment", null);
    StyleConstants.setAlignment(stylesize, StyleConstants.ALIGN_JUSTIFIED);
    doc.setParagraphAttributes(0,0, stylesize, false);*/
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        FileSaved = 1;
        jButton1.setBackground(Color.WHITE);
        jButton1.setText("Saved");
        String TitleText = jTextField1.getText();
        String Author = jTextField3.getText();
        String str = jTextPane1.getText();
        FileOutputStream Fileout = null;
        if(fileToSave == null)
        {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Specify a file to save");
        try {
            Fileout = new FileOutputStream("output.txt");
        int SaveFlag = chooser.showSaveDialog(this);
        if (SaveFlag == JFileChooser.APPROVE_OPTION) {
           fileToSave = chooser.getSelectedFile();
           PrintWriter out = new PrintWriter(fileToSave);
           out.println("Document Title :  " + TitleText);
           out.println("Document Author : " +  Author);
           out.println(str);
           out.close();
           jLabel2.setText(fileToSave.getName());
          } 
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else if(fileToSave !=null)
        {
           PrintWriter out = null;
            try {
                out = new PrintWriter(fileToSave);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
           out.println("Document Title :  " + TitleText);
           out.println("Document Author : " +  Author);
           out.println(str);
           out.close();
           jLabel2.setText(fileToSave.getName());
        }
        fileToSaveName = (fileToSave.getName()).replaceFirst("[.][^.]+$", "");
        this.setTitle("Bhavin's Text Editor : " + fileToSave.getName());
         CLSFile =new File(fileToSaveName + ".CLS");
        try {
            CLSFile.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

String line = "", Para = "";
SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Specify a file to Open");
        try {
        int SaveFlag = chooser.showOpenDialog(this);
        if (SaveFlag == JFileChooser.APPROVE_OPTION) {
           fileToSave = chooser.getSelectedFile();
          BufferedReader in = new BufferedReader(new FileReader(fileToSave));
           line = in.readLine();
           String Title = line.replaceFirst("Document Title :  ", "");
           jTextField1.setText(Title);
           jTextField2.setText(sdf.format(fileToSave.lastModified()));
           line = in.readLine();
           String Author = line.replaceFirst("Document Author : ", "");
           jTextField3.setText(Author);
           jTextPane1.read(in, FontSize);
          /*while((line = in.readLine()) != null)
           {
               Para = Para + "\n" + line;
           }
          jTextPane1.setText(Para);*/
           jLabel2.setText(fileToSave.getName());
        }
        }
        catch(FileNotFoundException E)
        {System.out.println(E);} catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
         this.setTitle("Bhavin's Text Editor : " + fileToSave.getName());
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       FileSaved = 1;
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Specify a file to Open");
        try {
        int SaveFlag = chooser.showOpenDialog(this);
        if (SaveFlag == JFileChooser.APPROVE_OPTION) {
           fileToSave = chooser.getSelectedFile();
          BufferedReader in = new BufferedReader(new FileReader(fileToSave));
           line = in.readLine();
           String Title = line.replaceFirst("Document Title :  ", "");
           jTextField1.setText(Title);
           jTextField2.setText(sdf.format(fileToSave.lastModified()));
           line = in.readLine();
           String Author = line.replaceFirst("Document Author : ", "");
           jTextField3.setText(Author);
           jTextPane1.read(in, FontSize);
          /*while((line = in.readLine()) != null)
           {
               Para = Para + "\n" + line;
           }
          jTextPane1.setText(Para);*/
           jLabel2.setText(fileToSave.getName());
        }
        }
        catch(FileNotFoundException E)
        {System.out.println(E);} catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
       }
        try {
            OpenCLSFile();
        } catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextPane1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextPane1CaretUpdate
        jButton1.setBackground(Color.ORANGE);
        jButton1.setText("Save");
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPane1CaretUpdate

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
    if(jToggleButton1.isSelected())this.setAlwaysOnTop( true );       
    else 
        this.setAlwaysOnTop( false );
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        if(fileToSave == null)
            JOptionPane.showMessageDialog(this, "No File Found To Upload. Please Save the file before Uploading ");
        else{        
             jButton8.setText("Uploading");
        try {
            
            UploadFile();
        } catch (IOException ex) {
                        Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
if(jToggleButton2.isSelected()==true)
    jTextPane1.setEditable(false);
else
    jTextPane1.setEditable(true);
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try {
            FileLister();
        } catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
      JOptionPane.showMessageDialog(this,"Bhavin Jawade : Student of SGSITS College Indore. bhavinjawade@gmail.com");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jList2ValueChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String FileNameFromIC = jList2.getSelectedValue();
        try {
            GetFileFromIC(FileNameFromIC);
        } catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
           /* for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
             
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
    }
    
    public void UploadFile() throws IOException
    {
        String server = "www.iridiumcloud.comxa.com";
        int port = 21;
        String user = "a8825860";
        String pass = "genretorx40";
 
        FTPClient ftpClient = new FTPClient();
        try {
 
            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
 
            // APPROACH #1: using retrieveFile(String, OutputStream)
           File firstLocalFile = fileToSave;
 
            String firstRemoteFile = "/public_html/code_dir/"+fileToSave.getName();
            InputStream inputStream = new FileInputStream(firstLocalFile);
            
            System.out.println("Start uploading first file");
            
            boolean done = ftpClient.storeFile(firstRemoteFile, inputStream);
            inputStream.close();
            if (done) {
                System.out.println("The first file is uploaded successfully.");
                JOptionPane.showMessageDialog(this, "File Uploaded Successfully To Iridium Cloud");
                jButton8.setText("Upload");
            }

 } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            if (ftpClient.isConnected()) {
                ftpClient.logout();
                ftpClient.disconnect();
            }
        }
    }
    
    public void FileLister() throws IOException
    {
        String server = "www.iridiumcloud.comxa.com";
        int port = 21;
        String user = "a8825860";
        String pass = "genretorx40";
 
        FTPClient ftpClient = new FTPClient();
        try {
 
            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
 
             ftpClient.connect(server, port);
            int replyCode = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(replyCode)) {
                System.out.println("Connect failed");
                return;
            }
 
            boolean success = ftpClient.login(user, pass);
            if (!success) {
                System.out.println("Could not login to the server");
                return;
            }
            
            // uses simpler methods
            String[] files2 = ftpClient.listNames("/public_html/code_dir/");
             for (String aFile: files2) {
                 if(!aFile.contains("."))
                 {System.out.println(aFile);
                 dlmlist.addElement(aFile);} 
                 else if(aFile.contains(".txt"))
                 {
                System.out.println(aFile);     
                dlmlist.addElement(aFile);
                 }
             }
            jList2.setModel(dlmlist);
 } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            if (ftpClient.isConnected()) {
                ftpClient.logout();
                ftpClient.disconnect();
            }
        }
    }
    File downloadFile1;
    public void GetFileFromIC(String Filename) throws IOException
    {
       String server = "www.iridiumcloud.comxa.com";
        int port = 21;
        String user = "a8825860";
        String pass = "genretorx40";
 
        FTPClient ftpClient = new FTPClient();
        try {
 
            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
 
            // APPROACH #1: using retrieveFile(String, OutputStream)
           String remoteFile1 = "/public_html/code_dir/"+Filename;
           downloadFile1 = new File(Filename+"_Downloaded");
            OutputStream outputStream1 = new BufferedOutputStream(new FileOutputStream(downloadFile1));
            boolean success = ftpClient.retrieveFile(remoteFile1, outputStream1);
            
            if (success) {
                System.out.println("The first file is downloaded successfully.");
                JOptionPane.showMessageDialog(this, "File Downloaded Successfully From Iridium Cloud");
                jButton8.setText("Upload");
            }
            else {
                System.out.println("The first file is not being downloaded successfully.");
                JOptionPane.showMessageDialog(this, "File NOT NOT NOT Downloaded Successfully From Iridium Cloud");
                jButton8.setText("Upload");
            }
            
            TextFieldWriter();
            outputStream1.close();
            
            


 } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            if (ftpClient.isConnected()) {
                ftpClient.logout();
                ftpClient.disconnect();
            }
        }
    }

    public void TextFieldWriter() throws IOException
    {
        String Title = null;
       String Author = null;
       BufferedReader in = new BufferedReader(new FileReader(downloadFile1));
       line = in.readLine();
           try{
           Boolean checkOrg = line.startsWith("Document Title :  " );
           if(checkOrg)
           {
              Title = line.replaceFirst("Document Title :  ", "");
               jTextField1.setText(Title);
           }
           }
           catch (Exception e)
           {System.out.println("1132"+e );}
           //jTextField1.setText(Title);
           //jTextField2.setText(sdf.format(downloadFile1.lastModified()));
           //line = in.readLine();
           line = in.readLine();
           try{
           Boolean checkOrg = line.startsWith("Document Author :  " );//Author = line.replaceFirst("Document Author : ", "");
           if(checkOrg)
           {
              Author = line.replaceFirst("Document Author :  ", "");
               jTextField1.setText(Author);
           }
    }
           catch (Exception e)
           {System.out.println("1146"+ e);}
           //jTextField3.setText(Author);
           jTextPane1.read(in, FontSize); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables
}


